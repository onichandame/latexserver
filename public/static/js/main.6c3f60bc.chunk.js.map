{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleSubmit","bind","onChange","state","engine","timeout","main","input","Form","onSubmit","this","Group","Label","Control","as","name","required","value","type","placeholder","id","Button","variant","e","target","files","setState","preventDefault","form","FormData","Object","keys","forEach","k","append","alert","fetch","method","body","then","res","catch","finally","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SA+EeA,G,kBAxEb,WAAYC,GACX,IAAD,8BACE,4CAAMA,KACDC,aAAa,EAAKA,aAAaC,KAAlB,gBAClB,EAAKC,SAAS,EAAKA,SAASD,KAAd,gBACd,EAAKE,MAAM,CACTC,OAAO,WACPC,QAAQ,IACRC,KAAK,WACLC,MAAM,eARV,E,sEAcE,OACE,kBAACC,EAAA,EAAD,CAAMC,SAAUC,KAAKV,cACnB,kBAACQ,EAAA,EAAKG,MAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,eACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcC,GAAG,SAASC,KAAK,SAASb,SAAUQ,KAAKR,SAAUc,UAAQ,GACvE,4BAAQC,MAAM,YAAd,YACA,4BAAQA,MAAM,WAAd,aAGJ,kBAACT,EAAA,EAAKG,MAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,oBACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcK,KAAK,OAAOH,KAAK,UAAUb,SAAUQ,KAAKR,SAAUiB,YAAY,QAAQH,UAAQ,KAEhG,kBAACR,EAAA,EAAKG,MAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,yBACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcK,KAAK,OAAOH,KAAK,OAAOb,SAAUQ,KAAKR,SAAUiB,YAAY,WAAWH,UAAQ,KAEhG,kBAACR,EAAA,EAAKG,MAAN,CAAYS,GAAG,SACb,kBAACZ,EAAA,EAAKI,MAAN,qBACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcK,KAAK,OAAOH,KAAK,QAAQb,SAAUQ,KAAKR,SAAUiB,YAAY,cAAcH,UAAQ,KAEpG,kBAACK,EAAA,EAAD,CAAQC,QAAQ,UAAUJ,KAAK,UAA/B,a,+BAOGK,GAEJA,EAAEC,OAAOC,MAAOf,KAAKgB,SAAL,eAAgBH,EAAEC,OAAOT,KAAMQ,EAAEC,OAAOC,MAAM,KAC5Df,KAAKgB,SAAL,eAAgBH,EAAEC,OAAOT,KAAMQ,EAAEC,OAAOP,U,mCAGlCM,GACZ,IAAD,OACEA,EAAEI,iBACF,IAAIC,EAAK,IAAIC,SACbC,OAAOC,KAAKrB,KAAKP,OAAO6B,SAAQ,SAAAC,GACF,kBAAlB,EAAK9B,MAAM8B,GAAiBL,EAAKM,OAAOD,EAAE,EAAK9B,MAAM8B,IAC9B,kBAAlB,EAAK9B,MAAM8B,IAAiBL,EAAKM,OAAOD,EAAE,EAAK9B,MAAM8B,GAAGR,MAAM,OAE/EU,MAAM,WACNC,MAAM,GAAG,CACPC,OAAO,OACPC,KAAKV,IAEJW,MAAK,SAAAC,GACJL,MAAM,aAEPM,OAAM,SAAAlB,GACLY,MAAM,kBAEPO,SAAQ,WAAKP,MAAM,oB,GArERQ,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.6c3f60bc.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props)\n  {\n    super(props)\n    this.handleSubmit=this.handleSubmit.bind(this)\n    this.onChange=this.onChange.bind(this)\n    this.state={\n      engine:'pdflatex',\n      timeout:10000,\n      main:'main.tex',\n      input:'project.zip'\n    }\n  }\n\n  render()\n  {\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Group>\n          <Form.Label>Engine</Form.Label>\n          <Form.Control as=\"select\" name=\"engine\" onChange={this.onChange} required>\n            <option value=\"pdflatex\">pdflatex</option>\n            <option value=\"xelatex\">xelatex</option>\n          </Form.Control>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Timeout(ms)</Form.Label>\n          <Form.Control type=\"text\" name=\"timeout\" onChange={this.onChange} placeholder=\"10000\" required />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Source File Name</Form.Label>\n          <Form.Control type=\"text\" name=\"main\" onChange={this.onChange} placeholder=\"main.tex\" required />\n        </Form.Group>\n        <Form.Group id=\"input\">\n          <Form.Label>Project File</Form.Label>\n          <Form.Control type=\"file\" name=\"input\" onChange={this.onChange} placeholder=\"project.zip\" required />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    );\n  }\n\n  onChange(e)\n  {\n    if(e.target.files) this.setState({[e.target.name]:e.target.files[0]})\n    else this.setState({[e.target.name]:e.target.value})\n  }\n\n  handleSubmit(e)\n  {\n    e.preventDefault()\n    let form=new FormData()\n    Object.keys(this.state).forEach(k=>{\n      if(typeof this.state[k] === 'string') form.append(k,this.state[k])\n      else if(typeof this.state[k] === 'object') form.append(k,this.state[k].files[0])\n    })\n    alert('posting')\n    fetch('',{\n      method:'POST',\n      body:form\n    })\n      .then(res=>{\n        alert('posted')\n      })\n      .catch(e=>{\n        alert('post failed')\n      })\n      .finally(()=>{alert('post done')})\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}